#!/bin/bash

# HASH, ENCRYPT AND DECRYPT FUNCTIONS

hash() {
    printf '%s\n' "$1" | openssl sha512 | awk '{ gsub("(stdin)= ","",$2); print $2}'
}

encrypt() {
    printf '%s\n' "$1" | openssl enc -e -aes-256-cbc -a -md sha512 -pbkdf2 -iter 100000 -salt -k "$2" | tr '/' '-'
}

decrypt() {
    printf '%s\n' "$1"  | tr '-' '/' | openssl enc -d -aes-256-cbc -a -md sha512 -pbkdf2 -iter 100000 -salt -k "$2"
}


# CHECK FUNCTIONS

check_root() {
    if ! [ $(id -u) = 0 ]; then
        printf "The script has to be run as root." >&2
        exit 1
    fi

    if [ $SUDO_USER ]; then
        REAL_USER=$SUDO_USER
    else
        REAL_USER=$(whoami)
    fi
}

check_masterkey() {
    if ! [ -d .vault ]; then
        printf "There is no vault in this directory."
        exit 0
    fi

    VAULT=$(pwd)/.vault
    read -sp 'Enter masterkey: '      MASTERKEY ; printf "\n"
    SHAKEY_INPUT="$(hash ${MASTERKEY})"
    SHAKEY_REAL=$(sudo find .vault/ | grep -a "key" | awk '{ gsub(".vault/key_","",$1); print $1}')
    
    if [ "$SHAKEY_INPUT" = "$SHAKEY_REAL" ]; then 
        sleep 1
        KEY="$(hash ${MASTERKEY}${SHAKEY_INPUT})"
    else
        sleep 1
        printf "Incorrect masterkey. Quitting...\n"
        exit 1
    fi
}

# CORE COMMAND FUNCTIONS

cmd_init() {
    if [ -d .vault ]; then
        printf "There is already a vault in this directory. Quitting...\n"
        exit 1
    fi

    read -sp 'New masterkey: '      MASTERKEY   ; printf "\n"
    read -sp 'Confirm masterkey: '  MASTERKEY1  ; printf "\n"

    if [ "$MASTERKEY" != "$MASTERKEY1" ]; then 
        printf "Masterkeys did not match. Quitting...\n"  
        exit 1  
    else
        printf "Masterkeys matched.\n"
    fi

    sudo mkdir -m 600 .vault 

    if [ -d .vault ]; then
        VAULT=$(pwd)/.vault
        printf "Vault created in $VAULT\n"
    fi 

    sudo install -b -m 600 /dev/null $VAULT/"key_$(hash "${MASTERKEY}")"
}

cmd_add(){
    check_masterkey

    read -p     'Enter id : '           ID
    read -p     'Enter platform : '     PLATFORM
    stty -echo
    read -sp    'Enter password : '     PASSWORD     ; printf "\n"

    stty echo

    ENTRYNAME=$(encrypt ${ID}_${PLATFORM} ${KEY})
    FILENAME=$VAULT/"entry_${ENTRYNAME}" 
    CONTENT=$(encrypt ${PASSWORD} ${KEY})

    sudo install -b -m 600 /dev/null $FILENAME

    sudo printf '%s\n' "${CONTENT}" | sudo tee $FILENAME > /dev/null

    printf "Entry sucessfully stored.\n"
    exit 0
}

cmd_get(){
    check_masterkey

    read -p 'Enter search string: ' SEARCH_STRING

    INT=0

    find .vault/ -maxdepth 1 -type f | grep -a "entry" | while IFS= read -r FILENAME; do 

        INT=$((INT+1))

        ENTRYNAME=$(printf '%s\n' "${FILENAME}" | awk -F '_' '{print $2}')
        ENTRYNAME=$(decrypt ${ENTRYNAME} ${KEY})

        printf '%s' "${ENTRYNAME}" | grep -ia "${SEARCH_STRING}" > /dev/null

        if [ $? -eq 0 ]; then
            printf '%s\n' "(${INT}) ${ENTRYNAME}"
        fi

    done

    read -p 'Number of entry to get: ' N_ENTRY 

    FILENAME=$(find .vault/ -maxdepth 1 -type f | grep -a "entry" | sed -n "${N_ENTRY}"p)
    ENTRYNAME=$(printf '%s\n' "$FILENAME" | awk -F '_' '{print $2}')
    ENTRYNAME=$(decrypt ${ENTRYNAME} ${KEY})

    printf '%s' "The password for ${ENTRYNAME} is: " 

    decrypt "$(sudo cat "${FILENAME}")" ${KEY}
}

cmd_remove(){
    check_masterkey

    read -p 'Enter search string: ' SEARCH_STRING

    INT=0

    find .vault/ -maxdepth 1 -type f | grep -a "entry" | while IFS= read -r FILENAME; do 

        INT=$((INT+1))

        ENTRYNAME=$(printf '%s\n' "${FILENAME}" | awk -F '_' '{print $2}')
        ENTRYNAME=$(decrypt ${ENTRYNAME} ${KEY})

        printf '%s' "${ENTRYNAME}" | grep -ia "${SEARCH_STRING}" > /dev/null

        if [ $? -eq 0 ]; then
            printf '%s\n' "(${INT}) ${ENTRYNAME}"
        fi

    done

    read -p 'Number of entry to get: ' N_ENTRY 

    FILENAME=$(find .vault/ -maxdepth 1 -type f | grep -a "entry" | sed -n "${N_ENTRY}"p)
    ENTRYNAME=$(printf '%s\n' "$FILENAME" | awk -F '_' '{print $2}')
    ENTRYNAME=$(decrypt ${ENTRYNAME} ${KEY})

    sudo rm $FILENAME

    if [ $? -eq 0 ]; then
        printf '%s\n' "Entry ${ENTRYNAME} sucessfully removed"
        exit 0
    fi

    exit 1
}

cmd_destroy(){
    check_masterkey

    if [ -d .vault ]; then
        sudo rm -r .vault
        printf '%s\n' "Vault successfully destroyed."
        exit 0   
    else
        printf '%s\n' "There is no vault in this directory."
        exit 1
    fi

}

# HELP FUNCTIONS

vault_version() {
	cat <<-_EOF
	=============================================
	= vault: the standard unix password vault   =
	=                                           =
	=                  v0.0.1                   =
	=                                           =
	=              Leonardo HÃ¼gens              =
	=        https://github.com/lhugens/        =
	=                                           =
	=============================================
	_EOF
}

vault_help() {
	cat <<-_EOF
	Usage: sudo vault [OPTION]
        $PROGRAM
	    $PROGRAM init       Create vault in current directory.
	    $PROGRAM add        Add entry to vault. 
	    $PROGRAM get        Get entry from vault.
	    $PROGRAM remove     Remove existing entry.
	    $PROGRAM destroy    Completely remove vault in current directory.
	    $PROGRAM help       Show this text.
	    $PROGRAM version    Show version information.
        $PROGRAM
	_EOF
}

# FUNCTION CALLING

check_root

case "$1" in
	init    ) shift; cmd_init       "$@" ;;
    add     ) shift; cmd_add        "$@" ;;
    get     ) shift; cmd_get        "$@" ;;
    remove  ) shift; cmd_remove     "$@" ;;
    destroy ) shift; cmd_destroy    "$@" ;;
    version|--version|\? ) vault_version ;;
    help|--help|\? ) vault_help ;;
	* )
		if [ ! -z "$1" ]; then
            printf '%s\n' "Wrong usage of vault."
            vault_help
        else
            vault_help
		fi
		;;
esac
exit 0
